# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l_IRG3b9sYkl_8f3Zdnb3H-xGxI2H3SW

# Import library
"""

import pandas as pd
import os
from tfx.orchestration.beam.beam_dag_runner import BeamDagRunner
from modules import components, bank_market_pipelines

"""# 1. DATASET INFO"""

df = pd.read_csv('data\\bank.csv')
df

df.info()

def count_unique_values(dataframe):
    categorical_columns = dataframe.select_dtypes(include=['object']).columns
    unique_counts = {}

    for column in categorical_columns:
        unique_values = dataframe[column].nunique()
        unique_counts[column] = unique_values

    return unique_counts

unique_counts = count_unique_values(df)
print(unique_counts)

def print_numeric_columns(dataframe):
    numeric_columns = dataframe.select_dtypes(include=['int64']).columns

    for column in numeric_columns:
        print(column)

print_numeric_columns(df)

df.isna().sum()

"""# 2 Set Pipeline Variable"""

from tfx.orchestration.beam.beam_dag_runner import BeamDagRunner
from modules import components, bank_market_pipelines

PIPELANE_NAME = "awangnugrawan-pipeline"

# Pipeline inputs
DATA_ROOT = "data"
TRANSFORM_MODULE_FILE = "modules/bank_market_transform.py"
TUNER_MODULE_FILE = "modules/bank_market_tuner.py"
TRAINER_MODULE_FILE = "modules/bank_market_trainer.py"

# Pipeline outputs
OUTPUT_BASE = "outputs"

serving_model_dir = os.path.join(OUTPUT_BASE, "serving_model")
pipeline_root = os.path.join(OUTPUT_BASE, PIPELANE_NAME)
metadata_path = os.path.join(pipeline_root, "metadata.sqlite")

components_args = {
    "data_dir": DATA_ROOT,
    "training_module": TRAINER_MODULE_FILE,
    "tuner_module": TUNER_MODULE_FILE,
    "transform_module": TRANSFORM_MODULE_FILE,
    "training_steps": 500,
    "eval_steps": 200,
    "serving_model_dir": serving_model_dir,
}

components = components.init_components(components_args)

pipeline = bank_market_pipelines.init_pipeline(
    pipeline_root,
    PIPELANE_NAME,
    metadata_path,
    components
)
BeamDagRunner().run(pipeline)